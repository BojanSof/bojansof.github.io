{"data":{"all":{"edges":[{"node":{"frontmatter":{"listName":"üî≤ /STM32F4x1 C++ libraries","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/stm32f4x1-cpp-libs","popupImageAlt":"STM32F4 Blackpill board","popupImageSrc":"stm32f4-blackpill.webp","popupLiveLink":"","techIcons":["cplusplus","c","cmake"],"title":"STM32F4 BlackPill C++ libraries","slug":"projects/stm32f4x1-cpp-libs","video":"false","added":"2022-10-26"},"html":"<p>STM32F4 BlackPill C++ libraries is a project providing modern C++ interfaces for peripheral devices of STM32F401CC and STM32F411CE MCUs, found on so-called STM32 BlackPill boards, and external devices, such as OLED and TFT-LCD displays, resistive touch, serial EEPROMs and shift registers.</p>\n<p>The purpose of the project is to learn how to use modern C++ constructs for embeddded software development, in combination with CMake for project management.\nThe C++17 standard is used and many examples for how to use the interfaces are provided.\nTwo additional projects are developed with intention to be used alongside this project: <a href=\"https://github.com/nikodinovska/EmbeddedGfx\">EmbeddedGfx</a>, graphics library for embedded targets, and <a href=\"https://github.com/BojanSof/FSM-Generator\">FSM-Generator</a>, compile-time FSM generator written using the C++17 standard.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/stm32f4x1-cpp-libs.md"}},{"node":{"frontmatter":{"listName":"üõ† /FSM Generator","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/FSM-Generator","popupImageAlt":"finite state machine","popupImageSrc":"fsm.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"Compile-time FSM Generator","slug":"projects/fsmgenerator","video":"false","added":"2022-10-27"},"html":"<p>FSM-Generator is a header-only library providing compile-time event-based FSM(Finite State Machine generator), using modern C++.\nThe library can save writing boiler-plate <code>if-else</code> code found typically when implementing FSMs and keep the state machine code more organized and easy to read.\nThe C++17 standard is used. The library doesn't use dynamic allocation or run-time polymorphism, making it suitable for embedded platforms.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/fsmgenerator.md"}},{"node":{"frontmatter":{"listName":"üñºÔ∏è /EmbeddedGfx","nameOfClass":"projects-items","popupGithubLink":"https://github.com/nikodinovska/EmbeddedGfx","popupImageAlt":"canvas for drawing","popupImageSrc":"embeddedgfx.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"EmbeddedGfx","slug":"projects/embeddedgfx","video":"false","added":"2022-10-27"},"html":"<p>EmbeddedGfx is a library allowing easy drawing of shapes and text on 2D array of pixels, or directly drawing pixel-by-pixel to a device.</p>\n<p>The purpose of the project is to create small and optimized graphics library to be used for managing graphics for displays on embedded platforms.\nThe library is header-only and the C++17 standard is used.\nIt provides two canvas types:</p>\n<ul>\n<li>Buffered, to be used for small displays sizes, and</li>\n<li>Unbuffered, to be used for larger displays, when the target does not have enough memory for holding the buffer.</li>\n</ul>\n<p>The library provides drawing of shapes, including polygons and circles, filled and unfilled, and text.\nTo fill the polygons, scan line fill algorithm is used.\nCurrently, the library is used for OLED and TFT-LCD interfaces, found in the <a href=\"https://github.com/BojanSof/stm32f4x1-cpp-libs\">stm32f4x1-cpp-libs</a> project.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/embeddedgfx.md"}},{"node":{"frontmatter":{"listName":"üë®‚Äçüíª /About","nameOfClass":null,"popupGithubLink":"https://github.com/BojanSof","popupImageAlt":"Photo of myself","popupImageSrc":"bojan-sofronievski.jpg","popupLiveLink":null,"techIcons":["cplusplus","c","python","linux","cmake"],"title":"About me","slug":"/about","video":"false","added":null},"html":"<h2>Bojan Sofronievski</h2>\n<p>Electrical engineer based in Macedonia üá≤üá∞.<br>\nBSc in Electrical Engineering and Information Technologies, Computer Hardware Engineering and Electronics.<br>\nPassionate about Embedded Software Development, Signal Processing, Algorithm Development, and everything tech-related.<br></p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/info/about.md"}}]},"projects":{"edges":[{"node":{"frontmatter":{"listName":"üõ† /FSM Generator","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/FSM-Generator","popupImageAlt":"finite state machine","popupImageSrc":"fsm.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"Compile-time FSM Generator","slug":"projects/fsmgenerator","video":"false","added":"2022-10-27"},"html":"<p>FSM-Generator is a header-only library providing compile-time event-based FSM(Finite State Machine generator), using modern C++.\nThe library can save writing boiler-plate <code>if-else</code> code found typically when implementing FSMs and keep the state machine code more organized and easy to read.\nThe C++17 standard is used. The library doesn't use dynamic allocation or run-time polymorphism, making it suitable for embedded platforms.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/fsmgenerator.md"}},{"node":{"frontmatter":{"listName":"üñºÔ∏è /EmbeddedGfx","nameOfClass":"projects-items","popupGithubLink":"https://github.com/nikodinovska/EmbeddedGfx","popupImageAlt":"canvas for drawing","popupImageSrc":"embeddedgfx.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"EmbeddedGfx","slug":"projects/embeddedgfx","video":"false","added":"2022-10-27"},"html":"<p>EmbeddedGfx is a library allowing easy drawing of shapes and text on 2D array of pixels, or directly drawing pixel-by-pixel to a device.</p>\n<p>The purpose of the project is to create small and optimized graphics library to be used for managing graphics for displays on embedded platforms.\nThe library is header-only and the C++17 standard is used.\nIt provides two canvas types:</p>\n<ul>\n<li>Buffered, to be used for small displays sizes, and</li>\n<li>Unbuffered, to be used for larger displays, when the target does not have enough memory for holding the buffer.</li>\n</ul>\n<p>The library provides drawing of shapes, including polygons and circles, filled and unfilled, and text.\nTo fill the polygons, scan line fill algorithm is used.\nCurrently, the library is used for OLED and TFT-LCD interfaces, found in the <a href=\"https://github.com/BojanSof/stm32f4x1-cpp-libs\">stm32f4x1-cpp-libs</a> project.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/embeddedgfx.md"}},{"node":{"frontmatter":{"listName":"üî≤ /STM32F4x1 C++ libraries","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/stm32f4x1-cpp-libs","popupImageAlt":"STM32F4 Blackpill board","popupImageSrc":"stm32f4-blackpill.webp","popupLiveLink":"","techIcons":["cplusplus","c","cmake"],"title":"STM32F4 BlackPill C++ libraries","slug":"projects/stm32f4x1-cpp-libs","video":"false","added":"2022-10-26"},"html":"<p>STM32F4 BlackPill C++ libraries is a project providing modern C++ interfaces for peripheral devices of STM32F401CC and STM32F411CE MCUs, found on so-called STM32 BlackPill boards, and external devices, such as OLED and TFT-LCD displays, resistive touch, serial EEPROMs and shift registers.</p>\n<p>The purpose of the project is to learn how to use modern C++ constructs for embeddded software development, in combination with CMake for project management.\nThe C++17 standard is used and many examples for how to use the interfaces are provided.\nTwo additional projects are developed with intention to be used alongside this project: <a href=\"https://github.com/nikodinovska/EmbeddedGfx\">EmbeddedGfx</a>, graphics library for embedded targets, and <a href=\"https://github.com/BojanSof/FSM-Generator\">FSM-Generator</a>, compile-time FSM generator written using the C++17 standard.</p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/projects/stm32f4x1-cpp-libs.md"}}]},"info":{"edges":[{"node":{"frontmatter":{"listName":"üë®‚Äçüíª /About","nameOfClass":null,"popupGithubLink":"https://github.com/BojanSof","popupImageAlt":"Photo of myself","popupImageSrc":"bojan-sofronievski.jpg","popupLiveLink":null,"techIcons":["cplusplus","c","python","linux","cmake"],"title":"About me","slug":"/about","video":"false","added":null},"html":"<h2>Bojan Sofronievski</h2>\n<p>Electrical engineer based in Macedonia üá≤üá∞.<br>\nBSc in Electrical Engineering and Information Technologies, Computer Hardware Engineering and Electronics.<br>\nPassionate about Embedded Software Development, Signal Processing, Algorithm Development, and everything tech-related.<br></p>","fileAbsolutePath":"/github/workspace/src/markdown-pages/info/about.md"}}]}}}