{"data":{"all":{"edges":[{"node":{"frontmatter":{"listName":"üì∫ /CHIP-8 interpreter","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/CHIP-8-Interpreter","popupImageAlt":"chip8 games","popupImageSrc":"chip8.png","popupLiveLink":"","techIcons":["notepadplusplus"],"title":"CHIP-8 interpreter","slug":"projects/chip8-interpreter","video":"false","added":"2022-10-26"},"html":"<p><a href=\"https://en.wikipedia.org/wiki/CHIP-8\">CHIP-8 Interpreter</a>, written in x86 MASM.\nCHIP-8 is an interpreted programming language, developed in mid-1970s with goal of allowing video games to be more easily programmed on the 8-bit computers of that time period.\nTested under <a href=\"https://www.dosbox.com/\">DOSBox</a> with few games.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/chip8.md"}},{"node":{"frontmatter":{"listName":"‡πõ /Fractals","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Fractals","popupImageAlt":"Mandelbrot set","popupImageSrc":"fractals.png","popupLiveLink":"","techIcons":["java","apachemaven","eclipseide"],"title":"Fractals","slug":"projects/fractals","video":"false","added":"2022-10-26"},"html":"<p>This program contains collection of fractals, which can be accessed from a simple gui.\nFew of them have unique properties, which can be easily changed from the gui.\nMandelbrot set, Sierpinski triangle, Koch snowflake are among the few fractals implemented in this project.\nThe fractals can be saved as an image, with preferred width and height.\nThe project is developed in Java, using JavaFX and managed with maven.\nEclipse IDE was used.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/fractals.md"}},{"node":{"frontmatter":{"listName":"‚ö° /Lab bench PSU","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Lab-Bench-PSU","popupImageAlt":"3D render of PSU PCB","popupImageSrc":"lab-bench-psu.png","popupLiveLink":"","techIcons":["c"],"title":"Lab bench PSU","slug":"projects/lab-bench-psu","video":"false","added":"2022-10-26"},"html":"<p>The goal of this project is to create power supply with adjustable voltage and current limit, using cheap parts or parts I had lying around.\nThe power supply is based on a linear regulator, comprised of LM324 operation amplifier and TIP41 BJT as pass transistor, and switching-mode preregulator, which is buck converter realised with LM2576-ADJ.\nThe preregulator keeps constant 1.5 V on the linear regulator.\nFor controlling the power supply, PIC16F18855 microcontroller is used, with LCD with 2 rows and 16 columns and rotary encoder for user interface.\nThe firmware is develop using Mplab X IDE, with the free version of the XC8 compiler.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/lab-bench-psu.md"}},{"node":{"frontmatter":{"listName":"üî≤ /STM32 BluePill WaveGen","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/BluePillWaveGen","popupImageAlt":"3D render of wavegen PCB","popupImageSrc":"bluepill-wavegen.png","popupLiveLink":"","techIcons":["c","stmicroelectronics"],"title":"STM32 BluePill WaveGen","slug":"projects/stm32-bluepill-wavegen","video":"false","added":"2022-10-26"},"html":"<p>BluePill WaveGen is a DDS function generator implemented with STM32 BluePill board, based on STM32F103C8T6 microcontroller, 8-bit R-2R ladder DAC and additional circuitry for removing the DC offset.\nThe user interface is realized with OLED display based on SSD1306 controller and incremental rotary encoder.\nThe generator provides the basic waveform shapes, like sine waves, square waves and triangle waves.\nThe firmware is developed in C, using STM32 CubeIDE and HAL.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/bluepill-wavegen.md"}},{"node":{"frontmatter":{"listName":"üî≤ /STM32F4x1 C++ libs","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/stm32f4x1-cpp-libs","popupImageAlt":"STM32F4 Blackpill board","popupImageSrc":"stm32f4-blackpill.webp","popupLiveLink":"","techIcons":["cplusplus","c","cmake","stmicroelectronics"],"title":"STM32F4 BlackPill C++ libraries","slug":"projects/stm32f4x1-cpp-libs","video":"false","added":"2022-10-26"},"html":"<p>STM32F4 BlackPill C++ libraries is a project providing modern C++ interfaces for peripheral devices of STM32F401CC and STM32F411CE MCUs, found on so-called STM32 BlackPill boards, and external devices, such as OLED and TFT-LCD displays, resistive touch, serial EEPROMs and shift registers.</p>\n<p>The purpose of the project is to learn how to use modern C++ constructs for embeddded software development, in combination with CMake for project management.\nThe C++17 standard is used and many examples for how to use the interfaces are provided.\nTwo additional projects are developed with intention to be used alongside this project: <a href=\"https://github.com/nikodinovska/EmbeddedGfx\">EmbeddedGfx</a>, graphics library for embedded targets, and <a href=\"https://github.com/BojanSof/FSM-Generator\">FSM-Generator</a>, compile-time FSM generator written using the C++17 standard.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/stm32f4x1-cpp-libs.md"}},{"node":{"frontmatter":{"listName":"‚ñ¶ /Cellular automata","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/CellularAutomata","popupImageAlt":"","popupImageSrc":"","popupLiveLink":"","techIcons":["cplusplus","sfml"],"title":"Cellular automata","slug":"projects/cellular-automata","video":"cellular-automata.webm","added":"2022-10-27"},"html":"<p>This project is collection of cellular automata simulations.\nA <a href=\"https://en.wikipedia.org/wiki/Cellular_automaton\">cellular automaton</a> is a collection of cells arranged in a grid of specific shape, such that each cell changes state as a function of time, according to a defined set of rules driven by the states of neighboring cells.\nThe interface for cellular automaton allows implementing other cellular automata easily.\nThe project is developed in C++ using <a href=\"https://www.sfml-dev.org/\">SFML</a> and simple makefile for building.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/cellular-automata.md"}},{"node":{"frontmatter":{"listName":"üõ† /FSM Generator","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/FSM-Generator","popupImageAlt":"finite state machine","popupImageSrc":"fsm.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"Compile-time FSM Generator","slug":"projects/fsmgenerator","video":"false","added":"2022-10-27"},"html":"<p>FSM-Generator is a header-only library providing compile-time event-based FSM(Finite State Machine generator), using modern C++.\nThe library can save writing boiler-plate <code>if-else</code> code found typically when implementing FSMs and keep the state machine code more organized and easy to read.\nThe C++17 standard is used. The library doesn't use dynamic allocation or run-time polymorphism, making it suitable for embedded platforms.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/fsmgenerator.md"}},{"node":{"frontmatter":{"listName":"üñºÔ∏è /EmbeddedGfx","nameOfClass":"projects-items","popupGithubLink":"https://github.com/nikodinovska/EmbeddedGfx","popupImageAlt":"canvas for drawing","popupImageSrc":"embeddedgfx.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"EmbeddedGfx","slug":"projects/embeddedgfx","video":"false","added":"2022-10-27"},"html":"<p>EmbeddedGfx is a library allowing easy drawing of shapes and text on 2D array of pixels, or directly drawing pixel-by-pixel to a device.</p>\n<p>The purpose of the project is to create small and optimized graphics library to be used for managing graphics for displays on embedded platforms.\nThe library is header-only and the C++17 standard is used.\nIt provides two canvas types:</p>\n<ul>\n<li>Buffered, to be used for small displays sizes, and</li>\n<li>Unbuffered, to be used for larger displays, when the target does not have enough memory for holding the buffer.</li>\n</ul>\n<p>The library provides drawing of shapes, including polygons and circles, filled and unfilled, and text.\nTo fill the polygons, scan line fill algorithm is used.\nCurrently, the library is used for OLED and TFT-LCD interfaces, found in the <a href=\"https://github.com/BojanSof/stm32f4x1-cpp-libs\">stm32f4x1-cpp-libs</a> project.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/embeddedgfx.md"}},{"node":{"frontmatter":{"listName":"üõ£Ô∏è /Pseudo3D road","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Pseudo3D-road","popupImageAlt":"","popupImageSrc":"","popupLiveLink":"","techIcons":["cplusplus","sfml"],"title":"Pesudo3D road","slug":"projects/Pseudo3D-road","video":"pseudo3d.webm","added":"2022-10-27"},"html":"<p>Pseudo-3D (or 2.5D) perspective creates the illsuion of environment with three dimensions by using two-dimensional plane.\nThe program renders random pseudo-3d road with random curves and hills.\nIt is developed in C++ using <a href=\"https://www.sfml-dev.org/\">SFML</a> and simple makefile for building.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/pseudo3d.md"}},{"node":{"frontmatter":{"listName":"üéπ /Scorpiano","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/scorpiano","popupImageAlt":"scorpiano gui","popupImageSrc":"scorpiano.png","popupLiveLink":"","techIcons":["python","latex"],"title":"Scorpiano","slug":"projects/scorpiano","video":"false","added":"2022-10-27"},"html":"<p>Scorpiano is a system for automatic music transcription (AMT) for monophonic piano music, based on digital signal processing techniques.\nThe system is realised as a python program with simple graphical interface created using GTK3 and allows sheet music generation from input monophonic piano recording.\nThe sheet music can be exported as image in PNG format, MusicXML or MIDI files.\nThe goal of this project is to show that some problems can be tackled down with great success without using machine learning approaches.\nThe system was presented on <a href=\"https://etai.org.mk/en/home/\">ETAI</a> 2021 conference.\nThe paper can be found on <a href=\"https://github.com/BojanSof/scorpiano/blob/main/paper/ANT.pdf\">this</a> link.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/scorpiano.md"}},{"node":{"frontmatter":{"listName":"üë®‚Äçüíª /About","nameOfClass":null,"popupGithubLink":"https://github.com/BojanSof","popupImageAlt":"Photo of myself","popupImageSrc":"bojan-sofronievski.jpg","popupLiveLink":null,"techIcons":["cplusplus","c","python","linux","cmake"],"title":"About me","slug":"/about","video":"false","added":null},"html":"<h2>Bojan Sofronievski</h2>\n<p>MSc in Electrical Engineering and Information Technologies, Embedded Systems.<br>\nPassionate about Embedded Software Development, Signal Processing, Algorithm Development, and everything tech-related.<br></p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/info/about.md"}},{"node":{"frontmatter":{"listName":"üñäÔ∏è /Blog","nameOfClass":null,"popupGithubLink":null,"popupImageAlt":"Bojan's Personal Blog","popupImageSrc":"blog.jpg","popupLiveLink":"https://bojansof.github.io/blog/","techIcons":null,"title":"Personal Blog","slug":"/blog","video":"false","added":null},"html":"<p>My personal blog for topics that I am interested in.\nMainly programming, electronics and embedded systems.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/info/blog.md"}}]},"projects":{"edges":[{"node":{"frontmatter":{"listName":"‚ñ¶ /Cellular automata","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/CellularAutomata","popupImageAlt":"","popupImageSrc":"","popupLiveLink":"","techIcons":["cplusplus","sfml"],"title":"Cellular automata","slug":"projects/cellular-automata","video":"cellular-automata.webm","added":"2022-10-27"},"html":"<p>This project is collection of cellular automata simulations.\nA <a href=\"https://en.wikipedia.org/wiki/Cellular_automaton\">cellular automaton</a> is a collection of cells arranged in a grid of specific shape, such that each cell changes state as a function of time, according to a defined set of rules driven by the states of neighboring cells.\nThe interface for cellular automaton allows implementing other cellular automata easily.\nThe project is developed in C++ using <a href=\"https://www.sfml-dev.org/\">SFML</a> and simple makefile for building.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/cellular-automata.md"}},{"node":{"frontmatter":{"listName":"üõ† /FSM Generator","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/FSM-Generator","popupImageAlt":"finite state machine","popupImageSrc":"fsm.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"Compile-time FSM Generator","slug":"projects/fsmgenerator","video":"false","added":"2022-10-27"},"html":"<p>FSM-Generator is a header-only library providing compile-time event-based FSM(Finite State Machine generator), using modern C++.\nThe library can save writing boiler-plate <code>if-else</code> code found typically when implementing FSMs and keep the state machine code more organized and easy to read.\nThe C++17 standard is used. The library doesn't use dynamic allocation or run-time polymorphism, making it suitable for embedded platforms.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/fsmgenerator.md"}},{"node":{"frontmatter":{"listName":"üñºÔ∏è /EmbeddedGfx","nameOfClass":"projects-items","popupGithubLink":"https://github.com/nikodinovska/EmbeddedGfx","popupImageAlt":"canvas for drawing","popupImageSrc":"embeddedgfx.webp","popupLiveLink":"","techIcons":["cplusplus","cmake"],"title":"EmbeddedGfx","slug":"projects/embeddedgfx","video":"false","added":"2022-10-27"},"html":"<p>EmbeddedGfx is a library allowing easy drawing of shapes and text on 2D array of pixels, or directly drawing pixel-by-pixel to a device.</p>\n<p>The purpose of the project is to create small and optimized graphics library to be used for managing graphics for displays on embedded platforms.\nThe library is header-only and the C++17 standard is used.\nIt provides two canvas types:</p>\n<ul>\n<li>Buffered, to be used for small displays sizes, and</li>\n<li>Unbuffered, to be used for larger displays, when the target does not have enough memory for holding the buffer.</li>\n</ul>\n<p>The library provides drawing of shapes, including polygons and circles, filled and unfilled, and text.\nTo fill the polygons, scan line fill algorithm is used.\nCurrently, the library is used for OLED and TFT-LCD interfaces, found in the <a href=\"https://github.com/BojanSof/stm32f4x1-cpp-libs\">stm32f4x1-cpp-libs</a> project.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/embeddedgfx.md"}},{"node":{"frontmatter":{"listName":"üõ£Ô∏è /Pseudo3D road","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Pseudo3D-road","popupImageAlt":"","popupImageSrc":"","popupLiveLink":"","techIcons":["cplusplus","sfml"],"title":"Pesudo3D road","slug":"projects/Pseudo3D-road","video":"pseudo3d.webm","added":"2022-10-27"},"html":"<p>Pseudo-3D (or 2.5D) perspective creates the illsuion of environment with three dimensions by using two-dimensional plane.\nThe program renders random pseudo-3d road with random curves and hills.\nIt is developed in C++ using <a href=\"https://www.sfml-dev.org/\">SFML</a> and simple makefile for building.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/pseudo3d.md"}},{"node":{"frontmatter":{"listName":"üéπ /Scorpiano","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/scorpiano","popupImageAlt":"scorpiano gui","popupImageSrc":"scorpiano.png","popupLiveLink":"","techIcons":["python","latex"],"title":"Scorpiano","slug":"projects/scorpiano","video":"false","added":"2022-10-27"},"html":"<p>Scorpiano is a system for automatic music transcription (AMT) for monophonic piano music, based on digital signal processing techniques.\nThe system is realised as a python program with simple graphical interface created using GTK3 and allows sheet music generation from input monophonic piano recording.\nThe sheet music can be exported as image in PNG format, MusicXML or MIDI files.\nThe goal of this project is to show that some problems can be tackled down with great success without using machine learning approaches.\nThe system was presented on <a href=\"https://etai.org.mk/en/home/\">ETAI</a> 2021 conference.\nThe paper can be found on <a href=\"https://github.com/BojanSof/scorpiano/blob/main/paper/ANT.pdf\">this</a> link.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/scorpiano.md"}},{"node":{"frontmatter":{"listName":"üì∫ /CHIP-8 interpreter","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/CHIP-8-Interpreter","popupImageAlt":"chip8 games","popupImageSrc":"chip8.png","popupLiveLink":"","techIcons":["notepadplusplus"],"title":"CHIP-8 interpreter","slug":"projects/chip8-interpreter","video":"false","added":"2022-10-26"},"html":"<p><a href=\"https://en.wikipedia.org/wiki/CHIP-8\">CHIP-8 Interpreter</a>, written in x86 MASM.\nCHIP-8 is an interpreted programming language, developed in mid-1970s with goal of allowing video games to be more easily programmed on the 8-bit computers of that time period.\nTested under <a href=\"https://www.dosbox.com/\">DOSBox</a> with few games.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/chip8.md"}},{"node":{"frontmatter":{"listName":"‡πõ /Fractals","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Fractals","popupImageAlt":"Mandelbrot set","popupImageSrc":"fractals.png","popupLiveLink":"","techIcons":["java","apachemaven","eclipseide"],"title":"Fractals","slug":"projects/fractals","video":"false","added":"2022-10-26"},"html":"<p>This program contains collection of fractals, which can be accessed from a simple gui.\nFew of them have unique properties, which can be easily changed from the gui.\nMandelbrot set, Sierpinski triangle, Koch snowflake are among the few fractals implemented in this project.\nThe fractals can be saved as an image, with preferred width and height.\nThe project is developed in Java, using JavaFX and managed with maven.\nEclipse IDE was used.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/fractals.md"}},{"node":{"frontmatter":{"listName":"‚ö° /Lab bench PSU","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/Lab-Bench-PSU","popupImageAlt":"3D render of PSU PCB","popupImageSrc":"lab-bench-psu.png","popupLiveLink":"","techIcons":["c"],"title":"Lab bench PSU","slug":"projects/lab-bench-psu","video":"false","added":"2022-10-26"},"html":"<p>The goal of this project is to create power supply with adjustable voltage and current limit, using cheap parts or parts I had lying around.\nThe power supply is based on a linear regulator, comprised of LM324 operation amplifier and TIP41 BJT as pass transistor, and switching-mode preregulator, which is buck converter realised with LM2576-ADJ.\nThe preregulator keeps constant 1.5 V on the linear regulator.\nFor controlling the power supply, PIC16F18855 microcontroller is used, with LCD with 2 rows and 16 columns and rotary encoder for user interface.\nThe firmware is develop using Mplab X IDE, with the free version of the XC8 compiler.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/lab-bench-psu.md"}},{"node":{"frontmatter":{"listName":"üî≤ /STM32 BluePill WaveGen","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/BluePillWaveGen","popupImageAlt":"3D render of wavegen PCB","popupImageSrc":"bluepill-wavegen.png","popupLiveLink":"","techIcons":["c","stmicroelectronics"],"title":"STM32 BluePill WaveGen","slug":"projects/stm32-bluepill-wavegen","video":"false","added":"2022-10-26"},"html":"<p>BluePill WaveGen is a DDS function generator implemented with STM32 BluePill board, based on STM32F103C8T6 microcontroller, 8-bit R-2R ladder DAC and additional circuitry for removing the DC offset.\nThe user interface is realized with OLED display based on SSD1306 controller and incremental rotary encoder.\nThe generator provides the basic waveform shapes, like sine waves, square waves and triangle waves.\nThe firmware is developed in C, using STM32 CubeIDE and HAL.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/bluepill-wavegen.md"}},{"node":{"frontmatter":{"listName":"üî≤ /STM32F4x1 C++ libs","nameOfClass":"projects-items","popupGithubLink":"https://github.com/BojanSof/stm32f4x1-cpp-libs","popupImageAlt":"STM32F4 Blackpill board","popupImageSrc":"stm32f4-blackpill.webp","popupLiveLink":"","techIcons":["cplusplus","c","cmake","stmicroelectronics"],"title":"STM32F4 BlackPill C++ libraries","slug":"projects/stm32f4x1-cpp-libs","video":"false","added":"2022-10-26"},"html":"<p>STM32F4 BlackPill C++ libraries is a project providing modern C++ interfaces for peripheral devices of STM32F401CC and STM32F411CE MCUs, found on so-called STM32 BlackPill boards, and external devices, such as OLED and TFT-LCD displays, resistive touch, serial EEPROMs and shift registers.</p>\n<p>The purpose of the project is to learn how to use modern C++ constructs for embeddded software development, in combination with CMake for project management.\nThe C++17 standard is used and many examples for how to use the interfaces are provided.\nTwo additional projects are developed with intention to be used alongside this project: <a href=\"https://github.com/nikodinovska/EmbeddedGfx\">EmbeddedGfx</a>, graphics library for embedded targets, and <a href=\"https://github.com/BojanSof/FSM-Generator\">FSM-Generator</a>, compile-time FSM generator written using the C++17 standard.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/projects/stm32f4x1-cpp-libs.md"}}]},"info":{"edges":[{"node":{"frontmatter":{"listName":"üë®‚Äçüíª /About","nameOfClass":null,"popupGithubLink":"https://github.com/BojanSof","popupImageAlt":"Photo of myself","popupImageSrc":"bojan-sofronievski.jpg","popupLiveLink":null,"techIcons":["cplusplus","c","python","linux","cmake"],"title":"About me","slug":"/about","video":"false","added":null},"html":"<h2>Bojan Sofronievski</h2>\n<p>MSc in Electrical Engineering and Information Technologies, Embedded Systems.<br>\nPassionate about Embedded Software Development, Signal Processing, Algorithm Development, and everything tech-related.<br></p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/info/about.md"}},{"node":{"frontmatter":{"listName":"üñäÔ∏è /Blog","nameOfClass":null,"popupGithubLink":null,"popupImageAlt":"Bojan's Personal Blog","popupImageSrc":"blog.jpg","popupLiveLink":"https://bojansof.github.io/blog/","techIcons":null,"title":"Personal Blog","slug":"/blog","video":"false","added":null},"html":"<p>My personal blog for topics that I am interested in.\nMainly programming, electronics and embedded systems.</p>","fileAbsolutePath":"/home/runner/work/bojansof.github.io/bojansof.github.io/src/markdown-pages/info/blog.md"}}]}}}