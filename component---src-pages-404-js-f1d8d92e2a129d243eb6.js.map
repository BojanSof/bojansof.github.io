{"version":3,"file":"component---src-pages-404-js-f1d8d92e2a129d243eb6.js","mappings":"qLAwCA,EApCe,WACb,OACE,0BACEA,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,OAAQ,SAE3D,uBAAKH,MAAO,CAAEG,OAAQ,SACpB,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,QAAyB,MACzB,qBACEC,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAHN,WAQF,wBACER,MAAO,CACLG,OAAQ,OACRM,SAAU,WACVC,UAAW,SACXC,cAAe,SALnB,MAQK,IAAIC,MAAOC,cARhB,uBAQmD,MARnD,6CAS+B,2BAT/B,eAWE,qBACEP,KAAK,+CADP,oBAXF,KAmBL,ECAD,EAvBe,SAAC,GAAkB,IAAhBQ,EAAe,EAAfA,SAWhB,OACE,uBAAKC,UAAU,iBACZD,EACD,gBAAC,EAAD,MAGL,C,mEC1BKE,EAAM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,GAAaC,EAAAA,EAAAA,eAAbD,SAGR,GAFiBE,EAAAA,EAAAA,gBAAeC,GAAxBC,KASCC,aANPC,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,aACAC,EANF,EAMEA,gBAGIC,EAAM,CACVhB,MAAOA,GAASU,EAChBT,YAAaA,GAAeW,EAC5BV,MAAM,GAAIW,GAAUX,GAASY,GAC7BG,IAAI,GAAIJ,EAAUT,GAGpB,OACE,gBAAC,IAAD,CACEc,eAAgB,CAAEC,KAAM,MACxBnB,MAAOgB,EAAIhB,MACXW,cAAeA,GAEf,wBAAMS,KAAK,cAAcC,QAASL,EAAIf,cACtC,wBAAMmB,KAAK,QAAQC,QAASL,EAAId,QAE/Bc,EAAIC,KAAO,wBAAMK,SAAS,SAASD,QAASL,EAAIC,OAE/Cd,EAAiB,KAAS,wBAAMmB,SAAS,UAAUD,QAAQ,YAE5DL,EAAIhB,OAAS,wBAAMsB,SAAS,WAAWD,QAASL,EAAIhB,QAEpDgB,EAAIf,aACH,wBAAMqB,SAAS,iBAAiBD,QAASL,EAAIf,cAG9Ce,EAAId,OAAS,wBAAMoB,SAAS,WAAWD,QAASL,EAAId,QAErD,wBAAMkB,KAAK,eAAeC,QAAQ,wBAEjCN,GACC,wBAAMK,KAAK,kBAAkBC,QAASN,IAGvCC,EAAIhB,OAAS,wBAAMoB,KAAK,gBAAgBC,QAASL,EAAIhB,QAErDgB,EAAIf,aACH,wBAAMmB,KAAK,sBAAsBC,QAASL,EAAIf,cAG/Ce,EAAId,OAAS,wBAAMkB,KAAK,gBAAgBC,QAASL,EAAId,QAG3D,EAED,MASAH,EAAIwB,aAAe,CACjBvB,MAAO,KACPC,YAAa,KACbC,MAAO,KACPC,SAAS,GAGX,IAAMI,EAAK,Y,gECpEX,UARqB,kBACnB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKP,MAAM,mBACX,4CACA,oFAJiB,C","sources":["webpack://bojansof-portfolio/./src/components/Footer.js","webpack://bojansof-portfolio/./src/components/layout.js","webpack://bojansof-portfolio/./src/components/seo.js","webpack://bojansof-portfolio/./src/pages/404.js"],"sourcesContent":["import React from \"react\"\n//importing winbox https://github.com/nextapps-de/winbox/issues/1\nimport { Link } from \"gatsby\"\n\nconst Footer = () => {\n  return (\n    <footer\n      style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}\n    >\n      <div style={{ margin: \"auto\" }}>\n        <Link to=\"/\">Home</Link>{\" | \"}\n        <a\n          href=\"https://www.github.com/BojanSof\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n      </div>\n      <span\n        style={{\n          margin: \"auto\",\n          fontSize: \"xx-small\",\n          textAlign: \"center\",\n          paddingBottom: \"10px\",\n        }}\n      >\n        Â© {new Date().getFullYear()} Bojan Sofronievski {\" | \"} Source code\n        distributed under MIT License<br/>\n        Original by&nbsp;\n        <a\n          href=\"https://github.com/Kielx/terminal-portfolio\"\n        >\n          Krzysztof Pantak\n        </a>.\n      </span>\n    </footer>\n  )\n}\n\nexport default Footer\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport \"../styles/styles.scss\"\nimport \"../styles/global.css\"\nimport \"../styles/layout.css\"\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Footer from \"./Footer\"\nimport \"winbox/dist/css/winbox.min.css\"\n\nconst Layout = ({ children }) => {\n  /* const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `) */\n\n  return (\n    <div className=\"mainContainer\">\n      {children}\n      <Footer />\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useLocation } from \"@reach/router\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang: \"en\" }}\n      title={seo.title}\n      titleTemplate={titleTemplate}\n    >\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  )\n}\n\nexport default SEO\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <Seo title=\"404: Not found\" />\n    <h1>404: Not Found</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n"],"names":["style","display","flexDirection","margin","Link","to","href","target","rel","fontSize","textAlign","paddingBottom","Date","getFullYear","children","className","SEO","title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","htmlAttributes","lang","name","content","property","defaultProps"],"sourceRoot":""}